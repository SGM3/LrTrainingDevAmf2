/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.service.builder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.training.service.builder.model.TrackerEntry;
import com.liferay.training.service.builder.model.TrackerEntryModel;
import com.liferay.training.service.builder.model.TrackerEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TrackerEntry service. Represents a row in the &quot;tracking_TrackerEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.training.service.builder.model.TrackerEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrackerEntryImpl}.
 * </p>
 *
 * @author Shanon Mathai
 * @see TrackerEntryImpl
 * @see com.liferay.training.service.builder.model.TrackerEntry
 * @see com.liferay.training.service.builder.model.TrackerEntryModel
 * @generated
 */
@JSON(strict = true)
public class TrackerEntryModelImpl extends BaseModelImpl<TrackerEntry>
	implements TrackerEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tracker entry model instance should use the {@link com.liferay.training.service.builder.model.TrackerEntry} interface instead.
	 */
	public static final String TABLE_NAME = "tracking_TrackerEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "trackerEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "eventDate", Types.TIMESTAMP },
			{ "eventType", Types.VARCHAR },
			{ "ipAddress", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table tracking_TrackerEntry (trackerEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,eventDate DATE null,eventType VARCHAR(75) null,ipAddress VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table tracking_TrackerEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY trackerEntry.eventDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY tracking_TrackerEntry.eventDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.training.service.builder.model.TrackerEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.training.service.builder.model.TrackerEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.training.service.builder.model.TrackerEntry"),
			true);
	public static long EVENTTYPE_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long EVENTDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TrackerEntry toModel(TrackerEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TrackerEntry model = new TrackerEntryImpl();

		model.setTrackerEntryId(soapModel.getTrackerEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setEventDate(soapModel.getEventDate());
		model.setEventType(soapModel.getEventType());
		model.setIpAddress(soapModel.getIpAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TrackerEntry> toModels(TrackerEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TrackerEntry> models = new ArrayList<TrackerEntry>(soapModels.length);

		for (TrackerEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.training.service.builder.model.TrackerEntry"));

	public TrackerEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trackerEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrackerEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trackerEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TrackerEntry.class;
	}

	@Override
	public String getModelClassName() {
		return TrackerEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("trackerEntryId", getTrackerEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("eventDate", getEventDate());
		attributes.put("eventType", getEventType());
		attributes.put("ipAddress", getIpAddress());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long trackerEntryId = (Long)attributes.get("trackerEntryId");

		if (trackerEntryId != null) {
			setTrackerEntryId(trackerEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date eventDate = (Date)attributes.get("eventDate");

		if (eventDate != null) {
			setEventDate(eventDate);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String ipAddress = (String)attributes.get("ipAddress");

		if (ipAddress != null) {
			setIpAddress(ipAddress);
		}
	}

	@JSON
	@Override
	public long getTrackerEntryId() {
		return _trackerEntryId;
	}

	@Override
	public void setTrackerEntryId(long trackerEntryId) {
		_trackerEntryId = trackerEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getEventDate() {
		return _eventDate;
	}

	@Override
	public void setEventDate(Date eventDate) {
		_columnBitmask = -1L;

		_eventDate = eventDate;
	}

	@JSON
	@Override
	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	@JSON
	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TrackerEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TrackerEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TrackerEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TrackerEntryImpl trackerEntryImpl = new TrackerEntryImpl();

		trackerEntryImpl.setTrackerEntryId(getTrackerEntryId());
		trackerEntryImpl.setGroupId(getGroupId());
		trackerEntryImpl.setCompanyId(getCompanyId());
		trackerEntryImpl.setUserId(getUserId());
		trackerEntryImpl.setUserName(getUserName());
		trackerEntryImpl.setEventDate(getEventDate());
		trackerEntryImpl.setEventType(getEventType());
		trackerEntryImpl.setIpAddress(getIpAddress());

		trackerEntryImpl.resetOriginalValues();

		return trackerEntryImpl;
	}

	@Override
	public int compareTo(TrackerEntry trackerEntry) {
		int value = 0;

		value = DateUtil.compareTo(getEventDate(), trackerEntry.getEventDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TrackerEntry)) {
			return false;
		}

		TrackerEntry trackerEntry = (TrackerEntry)obj;

		long primaryKey = trackerEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TrackerEntryModelImpl trackerEntryModelImpl = this;

		trackerEntryModelImpl._originalUserId = trackerEntryModelImpl._userId;

		trackerEntryModelImpl._setOriginalUserId = false;

		trackerEntryModelImpl._originalEventType = trackerEntryModelImpl._eventType;

		trackerEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TrackerEntry> toCacheModel() {
		TrackerEntryCacheModel trackerEntryCacheModel = new TrackerEntryCacheModel();

		trackerEntryCacheModel.trackerEntryId = getTrackerEntryId();

		trackerEntryCacheModel.groupId = getGroupId();

		trackerEntryCacheModel.companyId = getCompanyId();

		trackerEntryCacheModel.userId = getUserId();

		trackerEntryCacheModel.userName = getUserName();

		String userName = trackerEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			trackerEntryCacheModel.userName = null;
		}

		Date eventDate = getEventDate();

		if (eventDate != null) {
			trackerEntryCacheModel.eventDate = eventDate.getTime();
		}
		else {
			trackerEntryCacheModel.eventDate = Long.MIN_VALUE;
		}

		trackerEntryCacheModel.eventType = getEventType();

		String eventType = trackerEntryCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			trackerEntryCacheModel.eventType = null;
		}

		trackerEntryCacheModel.ipAddress = getIpAddress();

		String ipAddress = trackerEntryCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			trackerEntryCacheModel.ipAddress = null;
		}

		return trackerEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{trackerEntryId=");
		sb.append(getTrackerEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", eventDate=");
		sb.append(getEventDate());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", ipAddress=");
		sb.append(getIpAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.training.service.builder.model.TrackerEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>trackerEntryId</column-name><column-value><![CDATA[");
		sb.append(getTrackerEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDate</column-name><column-value><![CDATA[");
		sb.append(getEventDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddress</column-name><column-value><![CDATA[");
		sb.append(getIpAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TrackerEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TrackerEntry.class
		};
	private long _trackerEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _eventDate;
	private String _eventType;
	private String _originalEventType;
	private String _ipAddress;
	private long _columnBitmask;
	private TrackerEntry _escapedModel;
}